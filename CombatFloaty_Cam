// CombatFloaty.cpp : Defines the entry point for the console application.
// Created 10/16/17
// Structured and written by Cameron McCoy with occasional (and appreciated) advice and commentary from Nichol He and Mr. Leonard Gregory Gardener

#include "stdafx.h"
#include <iostream>
#include <string>
#include <iomanip>
#include <math.h>
#include <stdlib.h>
#include <time.h>
#include <fstream>
using namespace std;

//*****FUNCTION PROTOTYPES*****//
void checkShipInArray(int, int, int, bool &); //Checks if the coordinants for the ship placement are valid.
void placeShips(int, int); //Places the ships on the player's board
void generateEnemyBoard(int, int); //Generates the enemy board
void checkPlayerHit(int, int); //Checks if the player hit an enemy ship
bool checkCoords(int, int); //Checks if the coordinants entered are valid
bool checkRemainingShips(); //Checks how many ships remain
void enemyTurn(); //The entire enemy turn
void checkEnemyHit(int, int);
void setBoards(); //Fills the grids
void displayBoards(); // Displays the active playing grids as seen by the player

							//*****VARIABLE DECLARATIONS*****//
char enemyGrid[9][9] = { '0' };
char playerGrid[9][9] = { '0' };
char playerEnemView[9][9] = { '0' };
int curCo1, curCo2; //Currently entered coordinants
int atakCoor1, atakCoor2; //Coordinants of attack
int playerShipsRemaining = 1, enemyShipsRemaining = 1; //Count of remaining ships
int maxSub = 8; //Maximum subscript of the arrays
bool shipIsInArray = false, coorIsInArray, shipsRemain = true;
int randNum1, randNum2; //Random numbers used for generation of enemy board


int main() {

	ofstream outFile;
	outFile.open("FinalScore.txt", ios::out);
	setBoards();
	srand(static_cast<int>(time(0)));
	randNum1 = 1 + rand() % (8 - 1 + 1);
	randNum2 = 1 + rand() % (8 - 1 + 1);

	cout << "Welcome to CombatFloaty 2017" << endl << endl;

	do {
		cout << "You have one ship on an 8 by 8 board. What is the Y coordinant of where would you like to place the front of your ship?" << endl;
		cin >> curCo1;
		cout << "What is the X coordinant of where you would like to place the front of your ship?" << endl;
		cin >> curCo2;
		checkShipInArray(curCo1, curCo2, maxSub, shipIsInArray);
	} while (shipIsInArray == false);

	placeShips(curCo1, curCo2);
	generateEnemyBoard(randNum1, randNum2);
	cout << "Ready for battle." << endl << endl;


	while (shipsRemain == true) {

        displayBoards();
        
		do {
			cout << "What is the Y coordinant of where you would like to shoot?" << endl;
			cin >> atakCoor1;
			cout << "What is the X coordinant of where you would like to shoot?" << endl;
			cin >> atakCoor2;
			coorIsInArray = checkCoords(atakCoor1, atakCoor2);
		} while (coorIsInArray == false);

		checkPlayerHit(atakCoor1, atakCoor2);
		enemyTurn();
		shipsRemain = checkRemainingShips();

	}

	cout << "Game Over" << endl;

	outFile << "Player Board" << endl;
	for (int i = 0; i < 9; i++) {
		for (int l = 0; l < 9; l++) {
			outFile << playerGrid[i][l];
		}
		outFile << endl;
	}

	outFile << "Enemy Board" << endl;
	for (int i = 0; i < 9; i++) {
			for (int l = 0; l < 9; l++) {
				outFile << enemyGrid[i][l];
			}
			outFile << endl;
		}
	

	return 0;
}

//*****FUNCTION DEFINITIONS*****//

void checkShipInArray(int co1, int co2, int maxSub, bool &inArray) { //Checks if the coordinants for the ship placement are valid
	inArray = false;
	if (co1 <= maxSub && co2 <= maxSub && co1 >= 1 && co2 >= 1) {
		inArray = true;
		return;
	}
	else {
		cout << "Invalid Coordinants" << endl;
		inArray = false;
		return;
	}

}

void placeShips(int cor1, int cor2) { //Places the ships on the player's board
	int tempCor1 = cor1 - 2, tempCor2 = cor2 - 2;
	checkShipInArray(tempCor1, tempCor2, maxSub, shipIsInArray);
	if (shipIsInArray == true) {
		playerGrid[cor1][cor2] = '#';
		playerGrid[cor1 - 1][cor2] = '#';
		playerGrid[cor1 - 2][cor2] = '#';
	}
	else {
		playerGrid[cor1][cor2] = '#';
		playerGrid[cor1 + 1][cor2] = '#';
		playerGrid[cor1 + 2][cor2] = '#';
	}
	return;
}

void generateEnemyBoard(int num1, int num2) { //Generates the enemy board

	int tempNum1 = num1 - 2, tempNum2 = num2 - 2;
	checkShipInArray(tempNum1, tempNum2, maxSub, shipIsInArray);
	if (shipIsInArray == true) {
		enemyGrid[num1][num2] = '#';
		enemyGrid[num1 - 1][num2] = '#';
		enemyGrid[num1 - 2][num2] = '#';
	}
	else {
		enemyGrid[num1][num2] = '#';
		enemyGrid[num1 + 1][num2] = '#';
		enemyGrid[num1 + 2][num2] = '#';
	}
}

void checkPlayerHit(int co1, int co2) {	//Checks if the player hit an enemy ship
	if (enemyGrid[co1][co2] == '#') {
		cout << "You hit an enemy ship!" << endl;
		enemyGrid[co1][co2] = '!';
		playerEnemView[co1][co2] = '!';
	}
	else {
		cout << "You missed." << endl;
		enemyGrid[co1][co2] = '@';
		playerEnemView[co1][co2] = '@';
	}

	return;
}

bool checkCoords(int co1, int co2) { //Checks if the coordinants entered are valid
	if (co1 <= maxSub && co2 <= maxSub && co1 >= 0 && co2 >= 0) {
		return true;
	}
	else {
		cout << "Invlalid Coordinants" << endl;
		return false;
	}
}

bool checkRemainingShips() { //Checks how many ships remain
	int enemyShipCount = 0;
	int playerShipCount = 0;
	for (int i = 1; i < 9; i++) {
		for (int l = 1; l < 9; l++) {
			if (enemyGrid[i][l] == '#') {
				enemyShipCount = enemyShipCount + 1;
			}

			if (playerGrid[i][l] == '#') {
				playerShipCount = playerShipCount + 1;
			}
		}
	}

	if (enemyShipCount == 0) {
		cout << "You win!" << endl;
		return false;
	}
	else if (playerShipCount == 0) {
		cout << "You lose." << endl;
		return false;
	}
	else {
		return true;
	}
}

void setBoards() { //Fills the grids
	for (int i = 1; i < 9; i++) {
		for (int l = 1; l < 9; l++) {
			enemyGrid[i][l] = '~';
		}
	}
	enemyGrid[1][0] = '1'; enemyGrid[2][0] = '2'; enemyGrid[3][0] = '3'; enemyGrid[4][0] = '4'; enemyGrid[5][0] = '5'; enemyGrid[6][0] = '6'; enemyGrid[7][0] = '7'; enemyGrid[8][0] = '8';
	enemyGrid[0][1] = '1'; enemyGrid[0][2] = '2'; enemyGrid[0][3] = '3'; enemyGrid[0][4] = '4'; enemyGrid[0][5] = '5'; enemyGrid[0][6] = '6'; enemyGrid[0][7] = '7'; enemyGrid[0][8] = '8';


	for (int i = 1; i < 9; i++) {
		for (int l = 1; l < 9; l++) {
			playerGrid[i][l] = '~';
		}
	}
	playerGrid[1][0] = '1'; playerGrid[2][0] = '2'; playerGrid[3][0] = '3'; playerGrid[4][0] = '4'; playerGrid[5][0] = '5'; playerGrid[6][0] = '6'; playerGrid[7][0] = '7'; playerGrid[8][0] = '8';
	playerGrid[0][1] = '1'; playerGrid[0][2] = '2'; playerGrid[0][3] = '3'; playerGrid[0][4] = '4'; playerGrid[0][5] = '5'; playerGrid[0][6] = '6'; playerGrid[0][7] = '7'; playerGrid[0][8] = '8';

	for (int i = 1; i < 9; i++) {
		for (int l = 1; l < 9; l++) {
			playerEnemView[i][l] = '~';
		}
	}
	playerEnemView[1][0] = '1'; playerEnemView[2][0] = '2'; playerEnemView[3][0] = '3'; playerEnemView[4][0] = '4'; playerEnemView[5][0] = '5'; playerEnemView[6][0] = '6'; playerEnemView[7][0] = '7'; playerEnemView[8][0] = '8';
	playerEnemView[0][1] = '1'; playerEnemView[0][2] = '2'; playerEnemView[0][3] = '3'; playerEnemView[0][4] = '4'; playerEnemView[0][5] = '5'; playerEnemView[0][6] = '6'; playerEnemView[0][7] = '7'; playerEnemView[0][8] = '8';
}

void enemyTurn() {
	int randCo1, randCo2;
	srand(static_cast<int>(time(0)));
	randCo1 = 1 + rand() % (8 - 1 + 1);
	randCo2 = 1 + rand() % (8 - 1 + 1);
	checkEnemyHit(randCo1, randCo2);
	return;
}

void checkEnemyHit(int co1, int co2) {
	if (playerGrid[co1][co2] == '#') {
		cout << "The enemy hit one of your ships!" << endl;
		playerGrid[co1][co2] = '!';
	}
	else {
		cout << "The enemy missed." << endl;
		playerGrid[co1][co2] = '@';
	}

	return;
	
}

void displayBoards() {
    
    /* cout << "Enemy Board" << endl;
		for (int i = 0; i < 9; i++) {
			for (int l = 0; l < 9; l++) {
				cout << enemyGrid[i][l];
			}
			cout << endl;
		}
    */

		cout << endl << "Player View of Enemy Board" << endl;
		for (int i = 0; i < 9; i++) {
			for (int l = 0; l < 9; l++) {
				cout << playerEnemView[i][l];
			}
			cout << endl;
		}

		cout << endl << "Player Board" << endl;
		for (int i = 0; i < 9; i++) {
			for (int l = 0; l < 9; l++) {
				cout << playerGrid[i][l];
			}
			cout << endl;
		}
}
