// CombatFloaty.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
#include <string>
#include <iomanip>
#include <math.h>
#include <time.h>
using namespace std;

//*****FUNCTION PROTOTYPES*****//
void checkShipInArray(int, int, int, bool &);
void placeShips(int, int);

//*****VARIABLE DECLARATIONS*****//
char playerGrid[8][8] = { '~' };
char enemyGrid[8][8] = { '~' };
int curCo1, curCo2; //Currently entered coordinants
int atakCoor1, atakCoor2; //Coordinants of attack
int playerShipsRemaining = 1, enemyShipsRemaining = 1; //Count of remaining ships
int maxSub = 7; //Maximum subscript of the arrays
int randNum;
bool isInArray = false;


int main() {
	
	srand(time(NULL));
	cout << "Welcome to CombatFloaty 2017" << endl << endl;
	//GENERATE ENEMY BOARD FUNCTION

	while (isInArray == false) {
				cout << "You have one ship on an 8 by 8 board. What is the Y coordinant of where would you like to place the front of your ship?" << endl;
				cin >> curCo1;
				cout << "What is the X coordinant of where you would like to place the front of your ship?" << endl;
				cin >> curCo2;
				checkShipInArray(curCo1, curCo2, maxSub, isInArray);
			}
			placeShips(curCo1, curCo2);

	while (playerShipsRemaining > 0 && enemyShipsRemaining > 0) {

		isInArray = false;
		cout << "Ready for battle." << endl;
		cout << "What is the Y coordinant of where you would like to shoot?" << endl;
		cin >> atakCoor1;
		cout << "What is the X coordinant of where you would like to shoot?" << endl;
		cin >> atakCoor2;
		//ERROR FUNCTION
		//HITCHECK FUNCTION
		//ENEMY TURN FUNCTION

	}

	return 0;
}

//*****FUNCTION DEFINITIONS*****//

void checkShipInArray(int co1, int co2, int maxSub, bool &inArray) {
	inArray = false;
	if (co1 <= maxSub && co2 <= maxSub && co1 >= 0 && co2 >= 0) {
		inArray = true;
		return;
	}
	else {
		cout << "Invalid Coordinants" << endl << endl;
		inArray = false;
		return;
	}

}

void placeShips(int cor1, int cor2) {
	int tempCor1 = cor1 - 2, tempCor2 = cor2 - 2;
	checkShipInArray(tempCor1, tempCor2, maxSub, isInArray);
	if (isInArray == true) {
		playerGrid[cor1][cor2] = '#';
		playerGrid[cor1 - 1][cor2 - 1] = '#';
		playerGrid[cor1 - 2][cor2 - 2] = '#';
	}
	else {
		playerGrid[cor1][cor2] = '#';
		playerGrid[cor1 + 1][cor2 + 1] = '#';
		playerGrid[cor1 + 2][cor2 + 2] = '#';
	}
	return;
}
